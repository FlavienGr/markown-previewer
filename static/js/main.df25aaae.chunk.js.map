{"version":3,"sources":["textOrigin.md","components/textPreviewer.js","components/textEditor.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","TextPreviewer","props","react_default","a","createElement","className","id","dangerouslySetInnerHTML","getMarkdownText","TextEditor","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","fetch","TextOrigin","then","response","text","setState","handleTextarea","e","target","value","__html","marked","state","breaks","gfm","sanitize","starterText","console","log","onChange","textPreviewer","React","Component","App","textEditor","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","concat","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.df25aaae.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/textOrigin.9a336873.md\";","import React from \"react\";\n\nconst TextPreviewer = props => (\n  <div className=\"text-previewer\">\n    <div className=\"text-previewer__header\">Previewer</div>\n    <div id=\"preview\" dangerouslySetInnerHTML={props.getMarkdownText()} />\n  </div>\n);\nexport default TextPreviewer;\n","import React from \"react\";\nimport marked from \"marked\";\nimport TextPreviewer from \"./textPreviewer\";\nimport TextOrigin from \"../textOrigin.md\";\n\nclass TextEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: \"\",\n      starterText: \"\"\n    };\n  }\n  componentDidMount = () => {\n    fetch(TextOrigin)\n      .then(response => response.text())\n      .then(text => {\n        this.setState(() => ({\n          text\n        }));\n      });\n  };\n  handleTextarea = e => {\n    const text = e.target.value;\n\n    this.setState(() => ({\n      text\n    }));\n  };\n  getMarkdownText = () => {\n    const rawMarkup = marked(this.state.text, {\n      breaks: true,\n      gfm: true,\n      sanitize: true\n    });\n    return { __html: rawMarkup };\n  };\n\n  render() {\n    console.log(TextOrigin);\n    return (\n      <div className=\"text-editor\">\n        <div className=\"text-editor__box\">\n          <div className=\"text-editor__header\">Editor</div>\n\n          <textarea\n            id=\"editor\"\n            onChange={this.handleTextarea}\n            value={this.state.text}\n          />\n        </div>\n        <TextPreviewer getMarkdownText={this.getMarkdownText} />\n      </div>\n    );\n  }\n}\n\nexport default TextEditor;\n","import React from \"react\";\nimport TextEditor from \"./components/textEditor\";\n\nconst App = () => (\n  <div className=\"app\">\n    <TextEditor />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./scss/base/main.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}